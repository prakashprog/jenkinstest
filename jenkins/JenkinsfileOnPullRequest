def server = Artifactory.server 'ARTIFACTORY_SERVER'

pipeline {
  agent {
      label "jenkins-jdk17-dind-slave"
  }
  environment {
    LOCAL_MAVEN_CACHE = "/home/mavencache/.m222/${env.JOB_NAME}-${env.BUILD_NUMBER}"
    JAVA_HOME = "/usr/lib/jvm/jdk-17.0.7+7"
    SNAPSHOT_REPO_URL = "https://ci-jdk11.zafinworks.com/artifactory/libs-snapshot-local"
  }

    stages {

                stage('check build environment') {
                    steps {
                        sh '''
                            pwd
                            alternatives --set java /usr/lib/jvm/jdk-17.0.7+7/bin/java
                            java -version
                            which java
                            mvn -v
                            docker --version
                        '''    
                    }
                }

                stage('build') {
                        steps {
                            script { configFileProvider([configFile(fileId: 'bcd89c90-c128-4ef9-8df9-843a21967196', variable: 'SETTINGS_JDK11_IN_AZURE')]) {
                                    try {
                            sh '''
                                    mkdir -p ${LOCAL_MAVEN_CACHE}
                                    mvn -version  -Dmaven.repo.local=${LOCAL_MAVEN_CACHE} -gs $SETTINGS_JDK11_IN_AZURE
                                    mvn clean install -e -B -DskipTests=true -DskipValidation=true -Dmaven.repo.local=${LOCAL_MAVEN_CACHE} -gs $SETTINGS_JDK11_IN_AZURE                                    
                            '''    
                                            } catch(err) {
                                                echo "PIPELINE_ERROR - ${err}"
                                                if (currentBuild.result == 'UNSTABLE')
                                                    currentBuild.result = 'FAILURE'
                                                throw err
                                            }
                                    }
                                }
                            }
                }
   }
   post {
        always {

            echo "One way or another, build has finished"
            /* cleanup tmp directory */
            dir("${workspace}@tmp") {
                deleteDir()
            }
            /* cleanup maven cache */
            dir("${LOCAL_MAVEN_CACHE}"){
                deleteDir()
            }
            echo "Current Build Result: $currentBuild.result"
            dir("${WORKSPACE}"){
                sh 'ls -latr ${WORKSPACE}'
                sh 'rm -f ${WORKSPACE}/pipeline-log.zip ${WORKSPACE}/build*.log'
                step([$class: 'ConsoleLogToWorkspaceBuildStep',
                        blockOnAllOutput: true,
                        fileName: '${JOB_BASE_NAME}_${BUILD_NUMBER}.log',
                        writeConsoleLog: true])
                sh 'ls -latr ${WORKSPACE}'
                zip zipFile: 'pipeline-log.zip', archive: true, glob: 'build*.log', dir: ''
            }

            /* cleanup workspace */
                        deleteDir()
        }
         success {
            bitbucketStatusNotify(buildState: 'SUCCESSFUL')
                        dir("${WORKSPACE}"){
                                deleteDir()
                        }
        }
        aborted {
                        dir("${WORKSPACE}"){
                                deleteDir()
                        }
        }

    failure {
                echo "${GIT_BRANCH}"
                script {
                    if( GIT_BRANCH == "origin/develop" ){
                        icon = "âŒ"
                        mail to: "ashima.adya@zafin.com",
                        subject: "${icon} Jenkins Build Alert: ${currentBuild.fullDisplayName} failed",
                        mimeType: "text/html",
                        body: """
                            <html>
                            <body>
                            <style>
                            table{
                                border: 1px solid black;
                                border-collapse: collapse;
                                background-color: #D3FCFB;
                            }

                            th, td {
                                border: 1px solid black;
                                padding: 5px;
                                text-align: left;
                                }

                            th, td#t01{
                                border: 1px solid black;
                                padding: 5px;
                                text-align: left;
                                }
                            </style>
                            <h3><b><i>Build Alert Summary</i></b></h3>
                            <table style="width:100%">
                              <tr>
                                <td id="t01" style="background-color:#2890C8;"><b>BUILD STATUS</b></td>
                                <td id="t01"><font color="red"><b>${currentBuild.result}</b></font></td>
                              </tr>
                              <tr>
                                <td style="background-color:#2890C8;"><b>PROJECT NAME</b></td>
                                <td>${env.JOB_NAME}</td>
                              </tr>
                              <tr>
                                <td style="background-color:#2890C8;"><b>BUILD NUMBER</b></td>
                                <td>${env.BUILD_NUMBER}</td>
                              </tr>
                               <tr>
                                <td style="background-color:#2890C8;"><b>BUILD LOGS</b></td>
                                <td><a href="${env.BUILD_URL}">Click here for build #${env.BUILD_ID} logs on Jenkins</a></td>
                              </tr>
                            </table>
                            </body>
                            </html>
                            """
                    }
                }
                dir("${WORKSPACE}"){
                    deleteDir()
                }

        }
    }

}
